// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: proto/spiceroute.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Preference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Cuisines      []string               `protobuf:"bytes,2,rep,name=cuisines,proto3" json:"cuisines,omitempty"`
	Allergies     []string               `protobuf:"bytes,3,rep,name=allergies,proto3" json:"allergies,omitempty"`
	BudgetWeek    float64                `protobuf:"fixed64,4,opt,name=budget_week,json=budgetWeek,proto3" json:"budget_week,omitempty"`
	Spicy         bool                   `protobuf:"varint,5,opt,name=spicy,proto3" json:"spicy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Preference) Reset() {
	*x = Preference{}
	mi := &file_proto_spiceroute_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Preference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preference) ProtoMessage() {}

func (x *Preference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preference.ProtoReflect.Descriptor instead.
func (*Preference) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{0}
}

func (x *Preference) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Preference) GetCuisines() []string {
	if x != nil {
		return x.Cuisines
	}
	return nil
}

func (x *Preference) GetAllergies() []string {
	if x != nil {
		return x.Allergies
	}
	return nil
}

func (x *Preference) GetBudgetWeek() float64 {
	if x != nil {
		return x.BudgetWeek
	}
	return 0
}

func (x *Preference) GetSpicy() bool {
	if x != nil {
		return x.Spicy
	}
	return false
}

type Mood struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CuisinesThisWeek []string               `protobuf:"bytes,2,rep,name=cuisines_this_week,json=cuisinesThisWeek,proto3" json:"cuisines_this_week,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Mood) Reset() {
	*x = Mood{}
	mi := &file_proto_spiceroute_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mood) ProtoMessage() {}

func (x *Mood) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mood.ProtoReflect.Descriptor instead.
func (*Mood) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{1}
}

func (x *Mood) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Mood) GetCuisinesThisWeek() []string {
	if x != nil {
		return x.CuisinesThisWeek
	}
	return nil
}

type Dish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cuisine       string                 `protobuf:"bytes,3,opt,name=cuisine,proto3" json:"cuisine,omitempty"`
	PrepMinutes   int32                  `protobuf:"varint,4,opt,name=prep_minutes,json=prepMinutes,proto3" json:"prep_minutes,omitempty"`
	Calories      int32                  `protobuf:"varint,5,opt,name=calories,proto3" json:"calories,omitempty"`
	Ingredients   []string               `protobuf:"bytes,6,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	Cost          float64                `protobuf:"fixed64,7,opt,name=cost,proto3" json:"cost,omitempty"`
	ShelfLifeDays int32                  `protobuf:"varint,8,opt,name=shelf_life_days,json=shelfLifeDays,proto3" json:"shelf_life_days,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dish) Reset() {
	*x = Dish{}
	mi := &file_proto_spiceroute_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dish) ProtoMessage() {}

func (x *Dish) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dish.ProtoReflect.Descriptor instead.
func (*Dish) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{2}
}

func (x *Dish) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dish) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dish) GetCuisine() string {
	if x != nil {
		return x.Cuisine
	}
	return ""
}

func (x *Dish) GetPrepMinutes() int32 {
	if x != nil {
		return x.PrepMinutes
	}
	return 0
}

func (x *Dish) GetCalories() int32 {
	if x != nil {
		return x.Calories
	}
	return 0
}

func (x *Dish) GetIngredients() []string {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *Dish) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Dish) GetShelfLifeDays() int32 {
	if x != nil {
		return x.ShelfLifeDays
	}
	return 0
}

type PlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Days          int32                  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	Dishes        []*Dish                `protobuf:"bytes,3,rep,name=dishes,proto3" json:"dishes,omitempty"`
	DailyCalories float64                `protobuf:"fixed64,4,opt,name=daily_calories,json=dailyCalories,proto3" json:"daily_calories,omitempty"`
	BudgetWeek    float64                `protobuf:"fixed64,5,opt,name=budget_week,json=budgetWeek,proto3" json:"budget_week,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanRequest) Reset() {
	*x = PlanRequest{}
	mi := &file_proto_spiceroute_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRequest) ProtoMessage() {}

func (x *PlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRequest.ProtoReflect.Descriptor instead.
func (*PlanRequest) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{3}
}

func (x *PlanRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlanRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *PlanRequest) GetDishes() []*Dish {
	if x != nil {
		return x.Dishes
	}
	return nil
}

func (x *PlanRequest) GetDailyCalories() float64 {
	if x != nil {
		return x.DailyCalories
	}
	return 0
}

func (x *PlanRequest) GetBudgetWeek() float64 {
	if x != nil {
		return x.BudgetWeek
	}
	return 0
}

type DailyMeals struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DayIndex      int32                  `protobuf:"varint,1,opt,name=day_index,json=dayIndex,proto3" json:"day_index,omitempty"`
	DishIds       []string               `protobuf:"bytes,2,rep,name=dish_ids,json=dishIds,proto3" json:"dish_ids,omitempty"`
	Servings      []int32                `protobuf:"varint,3,rep,packed,name=servings,proto3" json:"servings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyMeals) Reset() {
	*x = DailyMeals{}
	mi := &file_proto_spiceroute_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyMeals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyMeals) ProtoMessage() {}

func (x *DailyMeals) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyMeals.ProtoReflect.Descriptor instead.
func (*DailyMeals) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{4}
}

func (x *DailyMeals) GetDayIndex() int32 {
	if x != nil {
		return x.DayIndex
	}
	return 0
}

func (x *DailyMeals) GetDishIds() []string {
	if x != nil {
		return x.DishIds
	}
	return nil
}

func (x *DailyMeals) GetServings() []int32 {
	if x != nil {
		return x.Servings
	}
	return nil
}

type PlanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schedule      []*DailyMeals          `protobuf:"bytes,1,rep,name=schedule,proto3" json:"schedule,omitempty"`
	CookDays      []string               `protobuf:"bytes,2,rep,name=cook_days,json=cookDays,proto3" json:"cook_days,omitempty"`
	ShoppingList  []string               `protobuf:"bytes,3,rep,name=shopping_list,json=shoppingList,proto3" json:"shopping_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanResponse) Reset() {
	*x = PlanResponse{}
	mi := &file_proto_spiceroute_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResponse) ProtoMessage() {}

func (x *PlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResponse.ProtoReflect.Descriptor instead.
func (*PlanResponse) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{5}
}

func (x *PlanResponse) GetSchedule() []*DailyMeals {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *PlanResponse) GetCookDays() []string {
	if x != nil {
		return x.CookDays
	}
	return nil
}

func (x *PlanResponse) GetShoppingList() []string {
	if x != nil {
		return x.ShoppingList
	}
	return nil
}

type Recipe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cuisine       string                 `protobuf:"bytes,3,opt,name=cuisine,proto3" json:"cuisine,omitempty"`
	PrepMinutes   int32                  `protobuf:"varint,4,opt,name=prep_minutes,json=prepMinutes,proto3" json:"prep_minutes,omitempty"`
	Calories      int32                  `protobuf:"varint,5,opt,name=calories,proto3" json:"calories,omitempty"`
	Ingredients   []string               `protobuf:"bytes,6,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	Cost          float64                `protobuf:"fixed64,7,opt,name=cost,proto3" json:"cost,omitempty"`
	ShelfLifeDays int32                  `protobuf:"varint,8,opt,name=shelf_life_days,json=shelfLifeDays,proto3" json:"shelf_life_days,omitempty"`
	Tags          []string               `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	Nutrition     string                 `protobuf:"bytes,10,opt,name=nutrition,proto3" json:"nutrition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_proto_spiceroute_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{6}
}

func (x *Recipe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recipe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recipe) GetCuisine() string {
	if x != nil {
		return x.Cuisine
	}
	return ""
}

func (x *Recipe) GetPrepMinutes() int32 {
	if x != nil {
		return x.PrepMinutes
	}
	return 0
}

func (x *Recipe) GetCalories() int32 {
	if x != nil {
		return x.Calories
	}
	return 0
}

func (x *Recipe) GetIngredients() []string {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *Recipe) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Recipe) GetShelfLifeDays() int32 {
	if x != nil {
		return x.ShelfLifeDays
	}
	return 0
}

func (x *Recipe) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Recipe) GetNutrition() string {
	if x != nil {
		return x.Nutrition
	}
	return ""
}

type RecipeID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeID) Reset() {
	*x = RecipeID{}
	mi := &file_proto_spiceroute_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeID) ProtoMessage() {}

func (x *RecipeID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeID.ProtoReflect.Descriptor instead.
func (*RecipeID) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{7}
}

func (x *RecipeID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RecipeQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cuisines      []string               `protobuf:"bytes,1,rep,name=cuisines,proto3" json:"cuisines,omitempty"`
	Spicy         bool                   `protobuf:"varint,2,opt,name=spicy,proto3" json:"spicy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeQuery) Reset() {
	*x = RecipeQuery{}
	mi := &file_proto_spiceroute_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeQuery) ProtoMessage() {}

func (x *RecipeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeQuery.ProtoReflect.Descriptor instead.
func (*RecipeQuery) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{8}
}

func (x *RecipeQuery) GetCuisines() []string {
	if x != nil {
		return x.Cuisines
	}
	return nil
}

func (x *RecipeQuery) GetSpicy() bool {
	if x != nil {
		return x.Spicy
	}
	return false
}

type RecipeList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipes       []*Recipe              `protobuf:"bytes,1,rep,name=recipes,proto3" json:"recipes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeList) Reset() {
	*x = RecipeList{}
	mi := &file_proto_spiceroute_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeList) ProtoMessage() {}

func (x *RecipeList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeList.ProtoReflect.Descriptor instead.
func (*RecipeList) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{9}
}

func (x *RecipeList) GetRecipes() []*Recipe {
	if x != nil {
		return x.Recipes
	}
	return nil
}

type Feedback struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DishId          string                 `protobuf:"bytes,2,opt,name=dish_id,json=dishId,proto3" json:"dish_id,omitempty"`
	Rating          int32                  `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`
	Skipped         bool                   `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	SubstitutedWith string                 `protobuf:"bytes,5,opt,name=substituted_with,json=substitutedWith,proto3" json:"substituted_with,omitempty"`
	Comment         string                 `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	CookedAt        string                 `protobuf:"bytes,7,opt,name=cooked_at,json=cookedAt,proto3" json:"cooked_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Feedback) Reset() {
	*x = Feedback{}
	mi := &file_proto_spiceroute_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feedback) ProtoMessage() {}

func (x *Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feedback.ProtoReflect.Descriptor instead.
func (*Feedback) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{10}
}

func (x *Feedback) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Feedback) GetDishId() string {
	if x != nil {
		return x.DishId
	}
	return ""
}

func (x *Feedback) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Feedback) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *Feedback) GetSubstitutedWith() string {
	if x != nil {
		return x.SubstitutedWith
	}
	return ""
}

func (x *Feedback) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Feedback) GetCookedAt() string {
	if x != nil {
		return x.CookedAt
	}
	return ""
}

type FeedbackBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*Feedback            `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedbackBatch) Reset() {
	*x = FeedbackBatch{}
	mi := &file_proto_spiceroute_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackBatch) ProtoMessage() {}

func (x *FeedbackBatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spiceroute_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackBatch.ProtoReflect.Descriptor instead.
func (*FeedbackBatch) Descriptor() ([]byte, []int) {
	return file_proto_spiceroute_proto_rawDescGZIP(), []int{11}
}

func (x *FeedbackBatch) GetEntries() []*Feedback {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_proto_spiceroute_proto protoreflect.FileDescriptor

const file_proto_spiceroute_proto_rawDesc = "" +
	"\n" +
	"\x16proto/spiceroute.proto\x12\rspiceroute.v1\x1a\x1bgoogle/protobuf/empty.proto\"\x96\x01\n" +
	"\n" +
	"Preference\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bcuisines\x18\x02 \x03(\tR\bcuisines\x12\x1c\n" +
	"\tallergies\x18\x03 \x03(\tR\tallergies\x12\x1f\n" +
	"\vbudget_week\x18\x04 \x01(\x01R\n" +
	"budgetWeek\x12\x14\n" +
	"\x05spicy\x18\x05 \x01(\bR\x05spicy\"M\n" +
	"\x04Mood\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12,\n" +
	"\x12cuisines_this_week\x18\x02 \x03(\tR\x10cuisinesThisWeek\"\xe1\x01\n" +
	"\x04Dish\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acuisine\x18\x03 \x01(\tR\acuisine\x12!\n" +
	"\fprep_minutes\x18\x04 \x01(\x05R\vprepMinutes\x12\x1a\n" +
	"\bcalories\x18\x05 \x01(\x05R\bcalories\x12 \n" +
	"\vingredients\x18\x06 \x03(\tR\vingredients\x12\x12\n" +
	"\x04cost\x18\a \x01(\x01R\x04cost\x12&\n" +
	"\x0fshelf_life_days\x18\b \x01(\x05R\rshelfLifeDays\"\xaf\x01\n" +
	"\vPlanRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04days\x18\x02 \x01(\x05R\x04days\x12+\n" +
	"\x06dishes\x18\x03 \x03(\v2\x13.spiceroute.v1.DishR\x06dishes\x12%\n" +
	"\x0edaily_calories\x18\x04 \x01(\x01R\rdailyCalories\x12\x1f\n" +
	"\vbudget_week\x18\x05 \x01(\x01R\n" +
	"budgetWeek\"`\n" +
	"\n" +
	"DailyMeals\x12\x1b\n" +
	"\tday_index\x18\x01 \x01(\x05R\bdayIndex\x12\x19\n" +
	"\bdish_ids\x18\x02 \x03(\tR\adishIds\x12\x1a\n" +
	"\bservings\x18\x03 \x03(\x05R\bservings\"\x87\x01\n" +
	"\fPlanResponse\x125\n" +
	"\bschedule\x18\x01 \x03(\v2\x19.spiceroute.v1.DailyMealsR\bschedule\x12\x1b\n" +
	"\tcook_days\x18\x02 \x03(\tR\bcookDays\x12#\n" +
	"\rshopping_list\x18\x03 \x03(\tR\fshoppingList\"\x95\x02\n" +
	"\x06Recipe\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acuisine\x18\x03 \x01(\tR\acuisine\x12!\n" +
	"\fprep_minutes\x18\x04 \x01(\x05R\vprepMinutes\x12\x1a\n" +
	"\bcalories\x18\x05 \x01(\x05R\bcalories\x12 \n" +
	"\vingredients\x18\x06 \x03(\tR\vingredients\x12\x12\n" +
	"\x04cost\x18\a \x01(\x01R\x04cost\x12&\n" +
	"\x0fshelf_life_days\x18\b \x01(\x05R\rshelfLifeDays\x12\x12\n" +
	"\x04tags\x18\t \x03(\tR\x04tags\x12\x1c\n" +
	"\tnutrition\x18\n" +
	" \x01(\tR\tnutrition\"\x1a\n" +
	"\bRecipeID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"?\n" +
	"\vRecipeQuery\x12\x1a\n" +
	"\bcuisines\x18\x01 \x03(\tR\bcuisines\x12\x14\n" +
	"\x05spicy\x18\x02 \x01(\bR\x05spicy\"=\n" +
	"\n" +
	"RecipeList\x12/\n" +
	"\arecipes\x18\x01 \x03(\v2\x15.spiceroute.v1.RecipeR\arecipes\"\xd0\x01\n" +
	"\bFeedback\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x17\n" +
	"\adish_id\x18\x02 \x01(\tR\x06dishId\x12\x16\n" +
	"\x06rating\x18\x03 \x01(\x05R\x06rating\x12\x18\n" +
	"\askipped\x18\x04 \x01(\bR\askipped\x12)\n" +
	"\x10substituted_with\x18\x05 \x01(\tR\x0fsubstitutedWith\x12\x18\n" +
	"\acomment\x18\x06 \x01(\tR\acomment\x12\x1b\n" +
	"\tcooked_at\x18\a \x01(\tR\bcookedAt\"B\n" +
	"\rFeedbackBatch\x121\n" +
	"\aentries\x18\x01 \x03(\v2\x17.spiceroute.v1.FeedbackR\aentries2\xa1\x01\n" +
	"\x0eProfileService\x12H\n" +
	"\x10UpsertPreference\x12\x19.spiceroute.v1.Preference\x1a\x19.spiceroute.v1.Preference\x12E\n" +
	"\rGetPreference\x12\x19.spiceroute.v1.Preference\x1a\x19.spiceroute.v1.Preference2Y\n" +
	"\x0ePlannerService\x12G\n" +
	"\fGeneratePlan\x12\x1a.spiceroute.v1.PlanRequest\x1a\x1b.spiceroute.v1.PlanResponse2\x95\x01\n" +
	"\rRecipeService\x12>\n" +
	"\fCreateRecipe\x12\x15.spiceroute.v1.Recipe\x1a\x17.spiceroute.v1.RecipeID\x12D\n" +
	"\vListRecipes\x12\x1a.spiceroute.v1.RecipeQuery\x1a\x19.spiceroute.v1.RecipeList2Y\n" +
	"\x0fFeedbackService\x12F\n" +
	"\x0eSubmitFeedback\x12\x1c.spiceroute.v1.FeedbackBatch\x1a\x16.google.protobuf.EmptyB'Z%github.com/you/spiceroute/proto;protob\x06proto3"

var (
	file_proto_spiceroute_proto_rawDescOnce sync.Once
	file_proto_spiceroute_proto_rawDescData []byte
)

func file_proto_spiceroute_proto_rawDescGZIP() []byte {
	file_proto_spiceroute_proto_rawDescOnce.Do(func() {
		file_proto_spiceroute_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_spiceroute_proto_rawDesc), len(file_proto_spiceroute_proto_rawDesc)))
	})
	return file_proto_spiceroute_proto_rawDescData
}

var file_proto_spiceroute_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_spiceroute_proto_goTypes = []any{
	(*Preference)(nil),    // 0: spiceroute.v1.Preference
	(*Mood)(nil),          // 1: spiceroute.v1.Mood
	(*Dish)(nil),          // 2: spiceroute.v1.Dish
	(*PlanRequest)(nil),   // 3: spiceroute.v1.PlanRequest
	(*DailyMeals)(nil),    // 4: spiceroute.v1.DailyMeals
	(*PlanResponse)(nil),  // 5: spiceroute.v1.PlanResponse
	(*Recipe)(nil),        // 6: spiceroute.v1.Recipe
	(*RecipeID)(nil),      // 7: spiceroute.v1.RecipeID
	(*RecipeQuery)(nil),   // 8: spiceroute.v1.RecipeQuery
	(*RecipeList)(nil),    // 9: spiceroute.v1.RecipeList
	(*Feedback)(nil),      // 10: spiceroute.v1.Feedback
	(*FeedbackBatch)(nil), // 11: spiceroute.v1.FeedbackBatch
	(*emptypb.Empty)(nil), // 12: google.protobuf.Empty
}
var file_proto_spiceroute_proto_depIdxs = []int32{
	2,  // 0: spiceroute.v1.PlanRequest.dishes:type_name -> spiceroute.v1.Dish
	4,  // 1: spiceroute.v1.PlanResponse.schedule:type_name -> spiceroute.v1.DailyMeals
	6,  // 2: spiceroute.v1.RecipeList.recipes:type_name -> spiceroute.v1.Recipe
	10, // 3: spiceroute.v1.FeedbackBatch.entries:type_name -> spiceroute.v1.Feedback
	0,  // 4: spiceroute.v1.ProfileService.UpsertPreference:input_type -> spiceroute.v1.Preference
	0,  // 5: spiceroute.v1.ProfileService.GetPreference:input_type -> spiceroute.v1.Preference
	3,  // 6: spiceroute.v1.PlannerService.GeneratePlan:input_type -> spiceroute.v1.PlanRequest
	6,  // 7: spiceroute.v1.RecipeService.CreateRecipe:input_type -> spiceroute.v1.Recipe
	8,  // 8: spiceroute.v1.RecipeService.ListRecipes:input_type -> spiceroute.v1.RecipeQuery
	11, // 9: spiceroute.v1.FeedbackService.SubmitFeedback:input_type -> spiceroute.v1.FeedbackBatch
	0,  // 10: spiceroute.v1.ProfileService.UpsertPreference:output_type -> spiceroute.v1.Preference
	0,  // 11: spiceroute.v1.ProfileService.GetPreference:output_type -> spiceroute.v1.Preference
	5,  // 12: spiceroute.v1.PlannerService.GeneratePlan:output_type -> spiceroute.v1.PlanResponse
	7,  // 13: spiceroute.v1.RecipeService.CreateRecipe:output_type -> spiceroute.v1.RecipeID
	9,  // 14: spiceroute.v1.RecipeService.ListRecipes:output_type -> spiceroute.v1.RecipeList
	12, // 15: spiceroute.v1.FeedbackService.SubmitFeedback:output_type -> google.protobuf.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_spiceroute_proto_init() }
func file_proto_spiceroute_proto_init() {
	if File_proto_spiceroute_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_spiceroute_proto_rawDesc), len(file_proto_spiceroute_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_spiceroute_proto_goTypes,
		DependencyIndexes: file_proto_spiceroute_proto_depIdxs,
		MessageInfos:      file_proto_spiceroute_proto_msgTypes,
	}.Build()
	File_proto_spiceroute_proto = out.File
	file_proto_spiceroute_proto_goTypes = nil
	file_proto_spiceroute_proto_depIdxs = nil
}
